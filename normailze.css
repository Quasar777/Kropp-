/**
  Нормализация блочной модели
 */
 *,
 ::before,
 ::after {
   box-sizing: border-box;
 }
 
 /**
   Убираем внутренние отступы слева тегам списков,
   у которых есть атрибут class
  */
 :where(ul, ol):where([class]) {
   padding-left: 0;
 }
 
 /**
   Убираем внешние отступы body и двум другим тегам,
   у которых есть атрибут class
  */
 body,
 :where(blockquote, figure):where([class]) {
   margin: 0;
 }
 
 /**
   Убираем внешние отступы вертикали нужным тегам,
   у которых есть атрибут class
  */
 :where(
   h1,
   h2,
   h3,
   h4,
   h5,
   h6,
   p,
   ul,
   ol,
   dl
 ):where([class]) {
   margin-block: 0;
 }
 
 :where(dd[class]) {
   margin-left: 0;
 }
 
 :where(fieldset[class]) {
   margin-left: 0;
   padding: 0;
   border: none;
 }
 
 /**
   Убираем стандартный маркер маркированному списку,
   у которого есть атрибут class
  */
 :where(ul[class]) {
   list-style: none;
 }
 
 :where(address[class]) {
   font-style: normal;
 }
 
 /**
   Обнуляем вертикальные внешние отступы параграфа,
   объявляем локальную переменную для внешнего отступа вниз,
   чтобы избежать взаимодействие с более сложным селектором
  */
 p {
   --paragraphMarginBottom: 24px;
 
   margin-block: 0;
 }
 
 /**
   Внешний отступ вниз для параграфа без атрибута class,
   который расположен не последним среди своих соседних элементов
  */
 p:where(:not([class]):not(:last-child)) {
   margin-bottom: var(--paragraphMarginBottom);
 }
 
 
 /**
   Упрощаем работу с изображениями
  */
 img {
   display: block;
   max-width: 100%;
 }
 
 /**
   Наследуем свойства шрифт для полей ввода
  */
 input,
 textarea,
 select,
 button {
   font: inherit;
 }
 
 html {
   /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
   height: 100%;
 }
 
 /**
   Плавный скролл
  */
 html,
 :has(:target) {
   scroll-behavior: smooth;
 }
 
 body {
   /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
   min-height: 100%;
   /**
     Унифицированный интерлиньяж
    */
   line-height: 1.5;
 }
 
 /**
   Приводим к единому цвету svg-элементы
  */
 svg *[fill] { fill: currentColor }
 svg *[stroke] { stroke: currentColor }
 
 /**
   Чиним баг задержки смены цвета при взаимодействии с svg-элементами
  */
 svg * {
   transition-property: fill, stroke;
 }
 
 /**
   Удаляем все анимации и переходы для людей,
   которые предпочитают их не использовать
  */
 @media (prefers-reduced-motion: reduce) {
   *,
   ::before,
   ::after {
     animation-duration: 0.01ms !important;
     animation-iteration-count: 1 !important;
     transition-duration: 0.01ms !important;
     scroll-behavior: auto !important;
   }
 }

 /* Глобальные CSS-переменные */
 :root {
    --color-dark: #000000;
    --color-dark-alternate: #131619;
    --color-light: #FFFFFF;
    --color-dark-gray: #404040;
    --color-light-gray: #C4C4C4;

    --border-radius: 30px;
    --border: 1px solid var(--color-light);

    --font-family-base: 'Heebo', sans-serif;
    --font-family-accent: 'Yantramanav', sans-serif;

    --input-height: 54px;

    --container-width: 1300px;
    --container-paddind-x: 15px;

    --transition-duration: 0.2s;

    --header-height: 90px;
 }

 /* Глобальные стили */
 body {
    background-color: var(--color-dark);
    font-family: var(--font-family-base) !important;
    color: var(--color-light-gray);
    font-size: 16px;
    line-height: 1.75;
 }

 svg *[fill] { fill: currentColor; }
 svg *[stroke] { stroke: currentColor; }

svg * {
  transition-property: fill, stroke;
}

 p {
  margin-block: 0;
 }

 p:not(:last-child) {
  margin-bottom: 24px;
 }

 .title-medium {
  font-size: clamp(20px, 2.08em, 40px);
  line-height: 1.3;
 }

 .title-big {
  font-size: clamp(24px, 3.12vw, 60px);
  line-height: 1.2;
 }

 .section-description {
  font-size: 20px;
  text-transform: uppercase;
  color: var(--color-light);
  text-align: center; 
  line-height: 1.65;
 }

 /* контентная сетка */
 .container {
    max-width: calc(var(--container-width) + var(--container-paddind-x) * 2);
    margin-inline: auto;
    padding-inline: var(--container-paddind-x);
 }

 .container-wide {
  max-width: 1920px;
  margin-inline: auto;
 }

 h1,h2,h3,h4,h5,h6 {
    font-weight: 700;
    text-transform: uppercase;
    color: var(--color-light);
 }

/* мой код */

a {
  color: var(--color-light);
}

a:hover {
  color: var(--color-light-gray)
}

a,
input,
button,
textarea,
svg * {
  transition-duration: var(--transition-duration);
}

.button {
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  height: 38px;
  padding-inline: 26px;
  font-weight: 700;
  font-size: 12px;
  line-height: 2;
  letter-spacing: 1.2px;
  text-transform: uppercase;
  background-color: var(--color-light);
  border: none;
  border-radius: var(--border-radius);
  white-space: nowrap;
}

.button:hover {
  background-color: var(--color-light-gray);
}

.button.transparent {
  position: relative;
  height: var(--input-height);
  padding-left: 31px;
  color: var(--color-light);
  padding-block: 14px;
  padding-right: 80px;
  background-color: transparent;
  border: var(--border);
}

.button.transparent::after {
  content: '';
  height: 54px;
  position: absolute;
  right: 0;
  aspect-ratio: 1;
  background: url('icons/arrow-up-right.svg') center/70% no-repeat;
  border: var(--border);
  border-radius: 50%;
}

.input {
  width: 100%;
  height: var(--input-height);
  padding-inline: 25px;
  color: var(--color-light);
  background-color: transparent;
  border: 1px solid var(--color-light-gray);
  border-radius: var(--border-radius);
}

.input::placeholder,
select.input:invalid {
  color: var(--color-light-gray);
}

.input:hover {
  border-color: var(--color-light);
}

.input:focus {
  outline: none;
}

/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type=number] {
  -moz-appearance: textfield;
}